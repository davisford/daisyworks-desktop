<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:components="daisyworks.view.components.*">
	<fx:Script>
		<![CDATA[
			import daisyworks.event.BluetoothTxRxEvent;
			import daisyworks.model.Icons;
			import daisyworks.model.Preferences;
			
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			import mx.messaging.events.MessageEvent;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Inject]
			public var prefs:Preferences;
			
			[Bindable]
			public var isConnected:Boolean = false;
			
			
			[EventHandler(event="BluetoothControlEvent.CONNECTED")]
			public function connected():void {
				isConnected=true;
			}
			
			[EventHandler(event="BluetoothControlEvent.DISCONNECTED")]
			public function disconnected():void {
				isConnected=false;
			}
			
			// _________________ TRANSMIT _________________ //
			
			protected function sendTI_keyDownHandler(event:KeyboardEvent):void {				
				if(event.keyCode == Keyboard.ENTER) {
					sendTextCommand(sendTI.text);
				}
			}
			
			protected function sendButton_clickHandler(event:MouseEvent):void {
				sendTextCommand(sendTI.text);
			}
						
			private function sendTextCommand(command:String):void {
				// clear TI
				sendTI.text = '';
				// append it to text area
				consoleTA.text += '\ntx> ' + command;
				// send it to the device
				if(crRadioGroup.selection == crOFF)
					dispatchEvent(new BluetoothTxRxEvent(BluetoothTxRxEvent.TX, command));
				else
					dispatchEvent(new BluetoothTxRxEvent(BluetoothTxRxEvent.TX, command+"\r"));
			}
			
			[EventHandler(event="BluetoothTxRxEvent.TX_FAULT", properties="fault")]
			public function sendFault(fault:Fault):void {
				if(consoleTA)
					consoleTA.text += '\ntx error> ' + fault.faultString;
			}
			
			// ___________________ RECEIVE ___________________ //

			[EventHandler(event="BluetoothTxRxEvent.RX", properties="data")]
			public function messageReceived(data:String):void {
				if(consoleTA) {
					consoleTA.text += '\nrx> ' + data;
					scrollDown();
				}
			}
				
			private function scrollDown(event:Event=null):void {
				// scroll with the text
				consoleTA.scroller.verticalScrollBar.value = consoleTA.scroller.verticalScrollBar.maximum + 100;
			}
			
			private const crToolTip:String = "Most commands will not need a trailing carriage return <CR>; however, some special debug modes do require it.  Use the radio button to toggle sending a carriage return or not.";

			private function smoothImage(evt:Event):void{
				var myBitmap:Bitmap = ((evt.target as Image).content as Bitmap);
				if (myBitmap != null) {
					myBitmap.smoothing = true;
				}
			}
	
			protected function debugPanel_collapseChangeHandler(event:Event):void
			{
				if(debugPanel.collapsed) {
					currentState = "Collapsed";
				} else {
					currentState = "Expanded";
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="Collapsed" />
		<s:State name="Expanded" />
	</s:states>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="crRadioGroup"/>
		
		<fx:String id="helpText">
			Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut eget ligula a odio ullamcorper volutpat. Pellentesque malesuada rhoncus sapien, ut mollis ligula ornare ut. Ut rhoncus fermentum sagittis. Mauris ornare, augue non feugiat ultricies, purus orci lobortis nunc, ut pharetra velit nisl ut lacus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque egestas viverra nisl id luctus. Etiam est lectus, dignissim sed luctus non, pellentesque at libero. Nunc elementum elit et augue lacinia hendrerit. Vivamus ligula velit, aliquam non vulputate at, posuere ac dui. Aenean sit amet nulla dui, vel varius eros. Ut quis enim eu mi semper mattis et et dolor.			
		</fx:String>
	</fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout gap="10"/>
	</s:layout>
	<components:CollapsiblePanel id="debugPanel" width.Expanded="100%"  height="100%" title="Debug Console" skinClass="daisyworks.view.skins.CollapsiblePanelSkin"
			collapseChange="debugPanel_collapseChangeHandler(event)">
		<components:layout>
			<s:VerticalLayout paddingRight="10" paddingLeft="10" paddingTop="10" paddingBottom="10" />
		</components:layout>
			<s:HGroup height="30" verticalAlign="middle" width="100%" paddingLeft="10">
				<s:TextInput width="100%" id="sendTI" keyDown="sendTI_keyDownHandler(event)" enabled="{isConnected}"/>
				<s:Button label="Send" id="sendButton" click="sendButton_clickHandler(event)" enabled="{isConnected}"/>
				<mx:VRule height="100%"/>
				<s:HGroup width="100%" height="100%" toolTip="{crToolTip}" verticalAlign="middle">
					<s:Label text="Carriage Return"/>
					<s:RadioButton id="crON" label="On" groupName="Carriage Return"/>
					<s:RadioButton id="crOFF" label="Off" groupName="Carriage Return" selected="true"/>
				</s:HGroup>
			</s:HGroup>
			<s:TextArea width="100%" height="100%" id="consoleTA" editable="false" 
						enabled="true" verticalScrollPolicy="on" 
						valueCommit="scrollDown(event)"
						resize="scrollDown(event)" contentBackgroundColor="#E6E7E2" borderVisible="false"/>
	</components:CollapsiblePanel>
	<mx:VBox label="Help" 
			 	 includeIn="Collapsed"
				 width="100%" 
				 height="100%" 
				 horizontalAlign="center"
				 paddingLeft="10" 
				 paddingRight="10" 
				 paddingTop="10" 
				 paddingBottom="10" 
				 textAlign="left">
		<mx:Image source="{Icons.DAISYWORKS}" complete="smoothImage(event)"/>
		<s:RichText text="{helpText}" width="100%" height="100%" />
	</mx:VBox>
		
</s:Group>
