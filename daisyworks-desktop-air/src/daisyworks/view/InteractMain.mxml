<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" 
		 height="100%" 
		 creationComplete="creationCompleteHandler(event)"
		 currentState="UnloadedWithoutFirmwareDisconnected" xmlns:view="daisyworks.view.*">
	<s:layout>
		<s:VerticalLayout paddingBottom.UnloadedWithFirmwareConnected="0"
						  paddingLeft.UnloadedWithFirmwareConnected="10"
						  paddingRight.UnloadedWithFirmwareConnected="10"
						  paddingTop.UnloadedWithFirmwareConnected="10"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import daisyworks.log.Logger;
			import daisyworks.model.App;
			
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ModuleEvent;
			import mx.logging.ILogger;
			import mx.modules.IModuleInfo;
			
			import spark.modules.ModuleLoader;

			[Bindable]
			private var app:App;
			
			[Bindable]
			private var url:String;
			
			[Bindable] private var connected:Boolean = false;
			[Bindable] private var loaded:Boolean = false;
			[Bindable] private var hasFirmware:Boolean = false;
			
			/* you must keep a reference to ModuleLoader or it will get gc'd and events won't fire */
			private var moduleLoader:ModuleLoader;
			private var content:Object;
			
			private static const LOG:ILogger = Logger.getLogger(InteractMain);
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				moduleLoader = new ModuleLoader();
				moduleLoader.addEventListener(ModuleEvent.READY, onReady);
				moduleLoader.addEventListener(ModuleEvent.ERROR, onError);
				moduleLoader.addEventListener(ModuleEvent.PROGRESS, onProgress);
				moduleLoader.addEventListener(ModuleEvent.SETUP, onSetup);
				moduleLoader.addEventListener(ModuleEvent.UNLOAD, onUnload);
				moduleLoader.addEventListener(mx.events.FlexEvent.LOADING, onLoading);
				moduleLoader.addEventListener(mx.events.FlexEvent.URL_CHANGED, onUrlChanged);
			}
			
			private function updateState():void {
				if(loaded && hasFirmware && connected) { currentState = "LoadedWithFirmwareConnected"; }
				else if(loaded && hasFirmware && !connected) { currentState = "LoadedWithFirmwareDisconnected"; }
				else if(loaded && !hasFirmware && connected) { currentState = "LoadedWithoutFirmwareConnected"; }
				else if(loaded && !hasFirmware && !connected) { currentState = "LoadedWithoutFirmwareDisconnected"; }
				else if(!loaded && hasFirmware && connected) { currentState = "UnloadedWithFirmwareConnected"; }
				else if(!loaded && hasFirmware && !connected) { currentState = "UnloadedWithFirmwareDisconnected"; }
				else if(!loaded && !hasFirmware && connected) { currentState = "UnloadedWithoutFirmwareConnected"; }
				else if(!loaded && !hasFirmware && !connected) { currentState = "UnloadedWithoutFirmwareDisconnected"; }
			}
			
			[EventHandler(event="BluetoothControlEvent.CONNECTED")]
			public function onConnected():void {
				connected = true;
				updateState();
			}
			
			[EventHandler(event="BluetoothControlEvent.DISCONNECTED")]
			public function onDisconnected():void {
				connected = false;
				updateState();
			}
						
			[EventHandler(event="AppEvent.DEPLOY", properties="app")]
			public function deploy(app:App):void {
				// remove content from the border container if it exists
				if(content) {
					border.removeChild(content as DisplayObject);
				}
				// unload the module if it is loaded
				moduleLoader.unloadModule();
				
				this.app = app;
				url = app.getSwf().path;
				
				hasFirmware = (app.getFirmware().path != null && app.getFirmware().path.length > 0);
				
				var swf:File = new File(url);
				if(!swf.exists) {
					LOG.error("Could not load SWF module from path {0} b/c the file does not exist.", url);
				} else {
					LOG.info("Trying to load " + url);
					
					// load the swf into a byte array first
					var bytes:ByteArray = new ByteArray();
					var urlLoader:URLLoader = new URLLoader();
					urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
					urlLoader.addEventListener(Event.COMPLETE,
						function(evt:Event):void {
							// give the byte array to the module loader (you must do this)
							bytes = ByteArray(evt.target.data);
							moduleLoader.loadModule(url, bytes);
						}
					);
					
					// load the swf file
					urlLoader.load(new URLRequest(url)); 
				}
			}
			
			private function onReady(evt:ModuleEvent):void {
				LOG.info("Module is ready");
				var info:IModuleInfo = evt.module;
				content = info.factory.create();
				//border.addElement(content as IVisualElement);
				border.addElementAt(content as IVisualElement, 1);
				loaded = true;
				updateState();
			}
			
			private function onError(evt:ModuleEvent):void {
				LOG.error("Module failed to load because {0} ", evt.errorText);
			}
			
			private function onUnload(evt:ModuleEvent):void { 
				LOG.info("Module was unloaded");
				loaded = false;
				updateState();
			}
			
			/**
			 * This is a ridiculous workaround for a bug in the Flex SDK
			 * I summarized here: http://aaronhardy.com/flex/loading-a-remote-module-into-a-local-app/
			 * 
			 * ...in the comments section.  You have to attach a handler to ModuleEvent.READY on the
			 * IModuleInfo object -- NOT the ModuleLoader as you would expect.  The event doesn't 
			 * consistently fire from ModuleLoader.  It seems like something is GC'd and the event is
			 * lost.  Thus, if you attach it here, it seems to work consistently.
			 */
			private function onSetup(evt:ModuleEvent):void { 
				LOG.info("Module was initialized");
			}
			
			private function onProgress(evt:ModuleEvent):void { 
				LOG.info("Module loaded {0} / {1} bytes ", evt.bytesLoaded, evt.bytesTotal);
			}
			
			private function onUrlChanged(evt:Event):void {
				LOG.info("Module url changed");
			}
			
			private function onLoading(evt:Event):void {
				LOG.info("Module is loading");
			}			
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="UnloadedWithFirmwareConnected" stateGroups="Unloaded, WithFirmware, Connected" />
		<s:State name="UnloadedWithFirmwareDisconnected" stateGroups="Unloaded, WithFirmware, Disconnected" />
		<s:State name="UnloadedWithoutFirmwareConnected" stateGroups="Unloaded, WithoutFirmware, Connected"/>
		<s:State name="UnloadedWithoutFirmwareDisconnected" stateGroups="Unloaded, WithoutFirmware, Disconnected" />
		<s:State name="LoadedWithFirmwareConnected" stateGroups="Loaded, WithFirmware, Connected"/>
		<s:State name="LoadedWithFirmwareDisconnected" stateGroups="Loaded, WithFirmware, Disconnected" />
		<s:State name="LoadedWithoutFirmwareConnected" stateGroups="Loaded, WithoutFirmware, Connected" />
		<s:State name="LoadedWithoutFirmwareDisconnected" stateGroups="Loaded, WithoutFirmware, Disconnected" />
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<view:FirmwareProgrammer left="10" right="10" top="10" bottom="10" height="100%" app="{app}" connected="{connected}"
							 width="100%" includeIn="WithFirmware"/>
	
	<s:BorderContainer id="border" left="10" right="10" bottom="0" top="20" enabled="{connected}"
					   width="100%"
					   height="100%">
		
		<s:Label id="helpLabel" y="229" includeIn="Unloaded, Disconnected"
				 text.UnloadedWithFirmwareConnected="Select App To Load It Here"
				 text.UnloadedWithFirmwareDisconnected="Select App To Load It Here"
				 text.UnloadedWithoutFirmwareConnected="Select App To Load It Here"
				 text.UnloadedWithoutFirmwareDisconnected="Select App To Load It Here"
				 text.LoadedWithFirmwareDisconnected="Please Connect To A Daisy"
				 text.LoadedWithoutFirmwareDisconnected="Please Connect To A Daisy"
				 width="100%" 
				 height="51" 
				 verticalAlign="middle" 
				 textAlign="center" 
				 fontWeight="bold" 
				 fontSize="24">
		</s:Label>
		
	</s:BorderContainer>
</s:Group>
